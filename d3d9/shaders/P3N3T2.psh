float4 g_gnd; // ground hemisphere light intensity
float4 g_sky; // sky hemisphere light intensity
float4 g_i; // light intensity
float4 g_s; // light intensity * material spec color and material shininess
float3 g_u; // world up in model space

sampler s0; // diffuse texture

struct PS_INPUT {
	float3 n : TEXCOORD0; // model space interpolated vertex normal
	float3 v : TEXCOORD1; // model space interpolated vertex to camera vector
	float3 l : TEXCOORD2; // model space interpolated vertex to spotLS vector
	float2 t : TEXCOORD3; // interpolated texture coordintes
	float a : TEXCOORD4; // interpolated attenuation
};

void main(PS_INPUT ps_input, out float4 c : COLOR) {
	float3 n = normalize(ps_input.n);
	float3 v = normalize(ps_input.v);
	float3 l = normalize(ps_input.l);
	float4 d = tex2D(s0, ps_input.t); // diffuse
	
	float n_dot_l = saturate(dot(n, l));
	float v_dot_r = saturate(dot(v, 2.f * n_dot_l * n - l));
	float self_shadow = saturate(4.f * n_dot_l);
	
	float4 ambient = d * lerp(g_gnd, g_sky, dot(n, g_u) * .5f + .5f);
	float4 diffuse = d * g_i * n_dot_l;

	c = ambient + self_shadow * ps_input.a * (diffuse + g_s * pow(v_dot_r, g_s.a));
	c.a = d.a;
}
